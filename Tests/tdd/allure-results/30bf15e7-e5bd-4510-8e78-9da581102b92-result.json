{"name": "test_get_element_text", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-item nav-link\" id=\"about\" href=\"/about\">...</a> is not clickable at point (921, 28). Other element would receive the click: <span>...</span>\n  (Session info: chrome=122.0.6261.129)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6459BAD02+56930]\n\t(No symbol) [0x00007FF64592F602]\n\t(No symbol) [0x00007FF6457E42E5]\n\t(No symbol) [0x00007FF645830A80]\n\t(No symbol) [0x00007FF64582E8AB]\n\t(No symbol) [0x00007FF64582C0B4]\n\t(No symbol) [0x00007FF64582AE45]\n\t(No symbol) [0x00007FF64581F798]\n\t(No symbol) [0x00007FF64584BC9A]\n\t(No symbol) [0x00007FF64581F09A]\n\t(No symbol) [0x00007FF64584BEB0]\n\t(No symbol) [0x00007FF6458681E2]\n\t(No symbol) [0x00007FF64584BA43]\n\t(No symbol) [0x00007FF64581D438]\n\t(No symbol) [0x00007FF64581E4D1]\n\tGetHandleVerifier [0x00007FF645D36F8D+3711213]\n\tGetHandleVerifier [0x00007FF645D904CD+4077101]\n\tGetHandleVerifier [0x00007FF645D8865F+4044735]\n\tGetHandleVerifier [0x00007FF645A59736+706710]\n\t(No symbol) [0x00007FF64593B8DF]\n\t(No symbol) [0x00007FF645936AC4]\n\t(No symbol) [0x00007FF645936C1C]\n\t(No symbol) [0x00007FF6459268D4]\n\t(No symbol) [0x00007FFFC6C97344]\n\tRtlUserThreadStart [0x00007FFFC711CC91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c89dce960f816cbab92b357bd4bfe127\")>\n\n    @allure.feature('UI Tests')\n    @allure.story('Demo Test')\n    def test_get_element_text(driver):\n        with allure.step(\"Launch browser and navigate to demo website\"):\n            commonUISteps.CommonUISteps.launch_web_browser(driver, \"https://practise.usemango.co.uk/\")\n    \n        with allure.step(\"Go to 'Products' page\"):\n            element = commonUISteps.CommonUISteps.wait_for_clickability(driver, (By.XPATH, \"//*[@id='products']\"), timeout=10)\n            commonUISteps.CommonUISteps.click(element)\n    \n        with allure.step(\"Click search bar and enter product name\"):\n            element = commonUISteps.CommonUISteps.wait_for_clickability(driver, (By.XPATH, \"//*[@id='searchproduct']\"), timeout=10)\n            commonUISteps.CommonUISteps.click(element)\n            commonUISteps.CommonUISteps.send_text(element, \"AirPods\")\n    \n        with allure.step(\"Add product to basket\"):\n            element = commonUISteps.CommonUISteps.wait_for_clickability(driver, (By.XPATH, \"//*[@id='root']/div/div/div[2]/div/div/div/div/div/a[2]\"), timeout=10)\n            commonUISteps.CommonUISteps.click(element)\n    \n        with allure.step(\"Go to basket\"):\n            element = commonUISteps.CommonUISteps.wait_for_clickability(driver, (By.XPATH, \"//*[@id='navbarNavAltMarkup']/div[2]/a[2]\"), timeout=10)\n            commonUISteps.CommonUISteps.click(element)\n    \n        with allure.step(\"Check item in basket\"):\n            text = commonUISteps.CommonUISteps.get_elements_text(driver, (By.XPATH, \"/html/body/div[1]/div/div/div[2]/h5\"))\n            assert text[0] == \"AirPods Pro\"\n    \n        with allure.step(\"Go to Contact Us page\"):\n            element = commonUISteps.CommonUISteps.wait_for_clickability(driver, (By.XPATH, \"//*[@id='about']\"), timeout=10)\n>           commonUISteps.CommonUISteps.click(element)\n\ntest_sample.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\uiAutomation\\commonUISteps.py:39: in click\n    element.click()\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000188F75BE770>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...bol) [0x00007FF6459268D4]\\\\n\\\\t(No symbol) [0x00007FFFC6C97344]\\\\n\\\\tRtlUserThreadStart [0x00007FFFC711CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-item nav-link\" id=\"about\" href=\"/about\">...</a> is not clickable at point (921, 28). Other element would receive the click: <span>...</span>\nE         (Session info: chrome=122.0.6261.129)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6459BAD02+56930]\nE       \t(No symbol) [0x00007FF64592F602]\nE       \t(No symbol) [0x00007FF6457E42E5]\nE       \t(No symbol) [0x00007FF645830A80]\nE       \t(No symbol) [0x00007FF64582E8AB]\nE       \t(No symbol) [0x00007FF64582C0B4]\nE       \t(No symbol) [0x00007FF64582AE45]\nE       \t(No symbol) [0x00007FF64581F798]\nE       \t(No symbol) [0x00007FF64584BC9A]\nE       \t(No symbol) [0x00007FF64581F09A]\nE       \t(No symbol) [0x00007FF64584BEB0]\nE       \t(No symbol) [0x00007FF6458681E2]\nE       \t(No symbol) [0x00007FF64584BA43]\nE       \t(No symbol) [0x00007FF64581D438]\nE       \t(No symbol) [0x00007FF64581E4D1]\nE       \tGetHandleVerifier [0x00007FF645D36F8D+3711213]\nE       \tGetHandleVerifier [0x00007FF645D904CD+4077101]\nE       \tGetHandleVerifier [0x00007FF645D8865F+4044735]\nE       \tGetHandleVerifier [0x00007FF645A59736+706710]\nE       \t(No symbol) [0x00007FF64593B8DF]\nE       \t(No symbol) [0x00007FF645936AC4]\nE       \t(No symbol) [0x00007FF645936C1C]\nE       \t(No symbol) [0x00007FF6459268D4]\nE       \t(No symbol) [0x00007FFFC6C97344]\nE       \tRtlUserThreadStart [0x00007FFFC711CC91+33]\n\n..\\..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "Launch browser and navigate to demo website", "status": "passed", "start": 1719578670619, "stop": 1719578671285}, {"name": "Go to 'Products' page", "status": "passed", "start": 1719578671285, "stop": 1719578672557}, {"name": "Click search bar and enter product name", "status": "passed", "start": 1719578672558, "stop": 1719578673348}, {"name": "Add product to basket", "status": "passed", "start": 1719578673348, "stop": 1719578673417}, {"name": "Go to basket", "status": "passed", "start": 1719578673418, "stop": 1719578673494}, {"name": "Check item in basket", "status": "passed", "start": 1719578673494, "stop": 1719578673518}, {"name": "Go to Contact Us page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-item nav-link\" id=\"about\" href=\"/about\">...</a> is not clickable at point (921, 28). Other element would receive the click: <span>...</span>\n  (Session info: chrome=122.0.6261.129)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6459BAD02+56930]\n\t(No symbol) [0x00007FF64592F602]\n\t(No symbol) [0x00007FF6457E42E5]\n\t(No symbol) [0x00007FF645830A80]\n\t(No symbol) [0x00007FF64582E8AB]\n\t(No symbol) [0x00007FF64582C0B4]\n\t(No symbol) [0x00007FF64582AE45]\n\t(No symbol) [0x00007FF64581F798]\n\t(No symbol) [0x00007FF64584BC9A]\n\t(No symbol) [0x00007FF64581F09A]\n\t(No symbol) [0x00007FF64584BEB0]\n\t(No symbol) [0x00007FF6458681E2]\n\t(No symbol) [0x00007FF64584BA43]\n\t(No symbol) [0x00007FF64581D438]\n\t(No symbol) [0x00007FF64581E4D1]\n\tGetHandleVerifier [0x00007FF645D36F8D+3711213]\n\tGetHandleVerifier [0x00007FF645D904CD+4077101]\n\tGetHandleVerifier [0x00007FF645D8865F+4044735]\n\tGetHandleVerifier [0x00007FF645A59736+706710]\n\t(No symbol) [0x00007FF64593B8DF]\n\t(No symbol) [0x00007FF645936AC4]\n\t(No symbol) [0x00007FF645936C1C]\n\t(No symbol) [0x00007FF6459268D4]\n\t(No symbol) [0x00007FFFC6C97344]\n\tRtlUserThreadStart [0x00007FFFC711CC91+33]\n\n", "trace": "  File \"C:\\Users\\kebba.mm\\OneDrive - Infuse Consulting Limited\\Desktop\\PythonAutoFramework\\Tests\\tdd\\test_sample.py\", line 51, in test_get_element_text\n    commonUISteps.CommonUISteps.click(element)\n  File \"C:\\Users\\kebba.mm\\OneDrive - Infuse Consulting Limited\\Desktop\\PythonAutoFramework\\uiAutomation\\commonUISteps.py\", line 39, in click\n    element.click()\n  File \"C:\\Users\\kebba.mm\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\kebba.mm\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\Users\\kebba.mm\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\kebba.mm\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1719578673518, "stop": 1719578674584}], "attachments": [{"name": "log", "source": "b434c93c-d5b4-48a6-957f-fd725a63edb9-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "25ab875a-29ee-40fd-8af6-574c4155384c-attachment.txt", "type": "text/plain"}], "start": 1719578670617, "stop": 1719578674590, "uuid": "799964b8-b561-441b-b5ad-01a1098c73a1", "historyId": "db309282914b724736abb93656617bf3", "testCaseId": "db309282914b724736abb93656617bf3", "fullName": "test_sample#test_get_element_text", "labels": [{"name": "feature", "value": "UI Tests"}, {"name": "story", "value": "Demo Test"}, {"name": "suite", "value": "test_sample"}, {"name": "host", "value": "IITP072"}, {"name": "thread", "value": "25224-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_sample"}]}